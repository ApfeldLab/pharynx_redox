function SAY98eat52do1 = importMetadata(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   SAY98EAT52DO1 = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   SAY98EAT52DO1 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   SAY98eat52do1 = importfile('SAY98_eat5_2do_2018_05_16.dat', 2, 50);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/05/30 16:41:49

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r','n','UTF-8');
% Skip the BOM (Byte Order Mark).
fseek(fileID, 3, 'bof');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,11,13,17,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,11,13,17,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]);
rawStringColumns = string(raw(:, [1,8,9,10,12,14,15,16,18,19,20,21]));


%% Exclude columns with non-numeric cells
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),rawNumericColumns),1); % Find columns with non-numeric cells
rawNumericColumns(:,I) = [];

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,3,4]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Initialize column outputs.
columnIndices = cumsum(~I);

%% Create output variable
SAY98eat52do1 = table;
SAY98eat52do1.ExpID = categorical(rawStringColumns(:, 1));
if ~I(1)
    SAY98eat52do1.Strain = cell2mat(rawNumericColumns(:, columnIndices(1)));
end
if ~I(2)
    SAY98eat52do1.Cohort = cell2mat(rawNumericColumns(:, columnIndices(2)));
end
if ~I(3)
    SAY98eat52do1.Replicate = cell2mat(rawNumericColumns(:, columnIndices(3)));
end
if ~I(4)
    SAY98eat52do1.Age = cell2mat(rawNumericColumns(:, columnIndices(4)));
end
if ~I(5)
    SAY98eat52do1.Column = cell2mat(rawNumericColumns(:, columnIndices(5)));
end
if ~I(6)
    SAY98eat52do1.plate = cell2mat(rawNumericColumns(:, columnIndices(6)));
end
SAY98eat52do1.PlateIDCol_plt = categorical(rawStringColumns(:, 2));
SAY98eat52do1.Imagedat = categorical(rawStringColumns(:, 3));
SAY98eat52do1.ID = categorical(rawStringColumns(:, 4));
if ~I(7)
    SAY98eat52do1.Frame = cell2mat(rawNumericColumns(:, columnIndices(7)));
end
SAY98eat52do1.Alive = rawStringColumns(:, 5);
if ~I(8)
    SAY98eat52do1.hourspostL4 = cell2mat(rawNumericColumns(:, columnIndices(8)));
end
SAY98eat52do1.TimeinLev = rawStringColumns(:, 6);
SAY98eat52do1.Timeimaging = rawStringColumns(:, 7);
SAY98eat52do1.TimetoRecover = rawStringColumns(:, 8);
if ~I(9)
    SAY98eat52do1.MovementRep1 = cell2mat(rawNumericColumns(:, columnIndices(9)));
end
SAY98eat52do1.Mosaic = rawStringColumns(:, 9);
SAY98eat52do1.HeadAFdarkinRT = rawStringColumns(:, 10);
SAY98eat52do1.Notesmorph = rawStringColumns(:, 11);
SAY98eat52do1.NotesAF = rawStringColumns(:, 12);
if ~I(10)
    SAY98eat52do1.Mode410 = cell2mat(rawNumericColumns(:, columnIndices(10)));
end
if ~I(11)
    SAY98eat52do1.Mode470 = cell2mat(rawNumericColumns(:, columnIndices(11)));
end
if ~I(12)
    SAY98eat52do1.Area = cell2mat(rawNumericColumns(:, columnIndices(12)));
end
if ~I(13)
    SAY98eat52do1.Intensity410_wholepharynx = cell2mat(rawNumericColumns(:, columnIndices(13)));
end
if ~I(14)
    SAY98eat52do1.Intensity470_wholepharynx = cell2mat(rawNumericColumns(:, columnIndices(14)));
end
if ~I(15)
    SAY98eat52do1.R1000 = cell2mat(rawNumericColumns(:, columnIndices(15)));
end
if ~I(16)
    SAY98eat52do1.Bckgnd410MS = cell2mat(rawNumericColumns(:, columnIndices(16)));
end
if ~I(17)
    SAY98eat52do1.Bckgnd470MS = cell2mat(rawNumericColumns(:, columnIndices(17)));
end
if ~I(18)
    SAY98eat52do1.OxD = cell2mat(rawNumericColumns(:, columnIndices(18)));
end
if ~I(19)
    SAY98eat52do1.E = cell2mat(rawNumericColumns(:, columnIndices(19)));
end
if ~I(20)
    SAY98eat52do1.Aream = cell2mat(rawNumericColumns(:, columnIndices(20)));
end
if ~I(21)
    SAY98eat52do1.X = cell2mat(rawNumericColumns(:, columnIndices(21)));
end
if ~I(22)
    SAY98eat52do1.Y = cell2mat(rawNumericColumns(:, columnIndices(22)));
end
if ~I(23)
    SAY98eat52do1.XM = cell2mat(rawNumericColumns(:, columnIndices(23)));
end
if ~I(24)
    SAY98eat52do1.YM = cell2mat(rawNumericColumns(:, columnIndices(24)));
end
if ~I(25)
    SAY98eat52do1.Perim = cell2mat(rawNumericColumns(:, columnIndices(25)));
end
if ~I(26)
    SAY98eat52do1.BX = cell2mat(rawNumericColumns(:, columnIndices(26)));
end
if ~I(27)
    SAY98eat52do1.BY = cell2mat(rawNumericColumns(:, columnIndices(27)));
end
if ~I(28)
    SAY98eat52do1.Width = cell2mat(rawNumericColumns(:, columnIndices(28)));
end
if ~I(29)
    SAY98eat52do1.Height = cell2mat(rawNumericColumns(:, columnIndices(29)));
end
if ~I(30)
    SAY98eat52do1.Major = cell2mat(rawNumericColumns(:, columnIndices(30)));
end
if ~I(31)
    SAY98eat52do1.Minor = cell2mat(rawNumericColumns(:, columnIndices(31)));
end
if ~I(32)
    SAY98eat52do1.Angle = cell2mat(rawNumericColumns(:, columnIndices(32)));
end
if ~I(33)
    SAY98eat52do1.Circ = cell2mat(rawNumericColumns(:, columnIndices(33)));
end
if ~I(34)
    SAY98eat52do1.Feret = cell2mat(rawNumericColumns(:, columnIndices(34)));
end
if ~I(35)
    SAY98eat52do1.Median = cell2mat(rawNumericColumns(:, columnIndices(35)));
end
if ~I(36)
    SAY98eat52do1.Skew = cell2mat(rawNumericColumns(:, columnIndices(36)));
end
if ~I(37)
    SAY98eat52do1.Kurt = cell2mat(rawNumericColumns(:, columnIndices(37)));
end
if ~I(38)
    SAY98eat52do1.FeretX = cell2mat(rawNumericColumns(:, columnIndices(38)));
end
if ~I(39)
    SAY98eat52do1.FeretY = cell2mat(rawNumericColumns(:, columnIndices(39)));
end
if ~I(40)
    SAY98eat52do1.FeretAngle = cell2mat(rawNumericColumns(:, columnIndices(40)));
end
if ~I(41)
    SAY98eat52do1.MinFeret = cell2mat(rawNumericColumns(:, columnIndices(41)));
end
if ~I(42)
    SAY98eat52do1.AR = cell2mat(rawNumericColumns(:, columnIndices(42)));
end
if ~I(43)
    SAY98eat52do1.Round = cell2mat(rawNumericColumns(:, columnIndices(43)));
end
if ~I(44)
    SAY98eat52do1.Solidity = cell2mat(rawNumericColumns(:, columnIndices(44)));
end

