function wormFd = makeWormFd_SJ(intensityData, varargin)
%SmoothIntensity Return a functional data object containing a smoothing of the
%intensity Data
%   intensityData should be length-normalized (see square).
    LAMBDA_DEFAULT = 10^2;
    N_ORDER_DEFAULT = 6;
    N_BREAKS_DEFAULT = 96;
    persistent p;
    if isempty(p)
        p = inputParser;
        p.FunctionName = 'makeWormFd_SJ';
        addOptional(p, 'lambda', LAMBDA_DEFAULT, @(x)validateattributes(x,{'numeric'}));
        addOptional(p, 'n_order', N_ORDER_DEFAULT, @(x)validateattributes(x,{'numeric'}));
        addOptional(p, 'n_breaks', N_BREAKS_DEFAULT, @(x)validateattributes(x,{'numeric'}));
    end
    
    parse(p,varargin{:});

    
    % Override defaults if necessary
    if isfield(p.Results, 'lambda')
        lambda = p.Results.lambda;
    end
    
    if isfield(p.Results, 'n_order')
        n_order = p.Results.n_order;
    end
    
    if isfield(p.Results, 'n_breaks')
        n_breaks = p.Results.n_breaks;
    end
    
    breaks = linspace(1, 100, n_breaks);
    n_basis = length(breaks) + n_order - 2;
    
    basis_range = [1 size(intensityData, 1)];
    bspline_basis = create_bspline_basis(basis_range, n_basis, n_order, breaks);

    Lfd2 = int2Lfd(2);
    wormFdPar = fdPar(bspline_basis, Lfd2, lambda);
    [wormFd,~,~] = smooth_basis(basis_range(1):basis_range(2), intensityData, wormFdPar);
end