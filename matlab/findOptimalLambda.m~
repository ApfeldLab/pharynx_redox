function [optimalLambda, gcv_vals] = findOptimalLambda(sqData, varargin)
%UNTITLED Find the optimal Smoothing Parameter (?) for the given data.
%   REQUIRED:
%       sqData:
%           This should be an MxN matrix (M=length of intensity vector, 
%           N=number of animals).
%   OPTIONAL:
%       logLambdas:
%           1xN matrix, each column consisting of the log(?) to test.
%           Can create with: min?:step:max? or linspace(min?, max?, N)
%           DEFAULT: -10:0.01:1
    
    LOG_LAMBDA_DEFAULT = -10:0.01:1;
    PLOT_DEFAULT = 0;
    
    persistent p;
    if isempty(p)
        p = inputParser;
        p.FunctionName = 'findOptimalLambda';
        
        addParameter(p, 'logLambdas', LOG_LAMBDA_DEFAULT);
        addParameter(p, 'plotGCV', PLOT_DEFAULT);
    end
    parse(p,varargin{:});
    
    log_lambdas = p.Results.logLambdas;

    Lfd2 = int2Lfd(2);

    gcv_vals = zeros(length(log_lambdas),1);

    parfor i=1:length(log_lambdas)
        lambda_i = 10.^log_lambdas(i);
        fdParams_i = fdPar(getbasis(initialFd), Lfd2, lambda_i);

        [~, ~, gvc_i] = smooth_basis(positions, data, fdParams_i);
        gcv_vals(i) = sum(gvc_i);
        % vals_i = eval_fd(positions, fd_i);
    end

    [min_gcv, min_gcv_idx] = min(gcv_vals);
    min_loglambda = log_lambdas(min_gcv_idx);
    optimalLambda = 10^min_loglambda;

    if p.Results.plotGCV
        figure('Name', 'GCV vs log lambda');
        plot(log_lambdas, gcv_vals); hold on;
        scatter(min_loglambda, min_gcv);
    end
end

