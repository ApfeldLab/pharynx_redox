function map = validateMidlineMap(map_str, stackNames)
% VALIDATE_MIDLINE_MAP Given an appropriate string, creates a corresponding
% matrix which indicates which frame's midline each frame should be
% measured with.
% 
% Examples of valid map strings:
%   1:2/2:2/3:2
%   1:1/2:2/3:3
%   1:3/2:2/3:3
%   all
%
% Returns a [n_frames x 2] matrix where the first column is the frame to
% measure and the second column is the frame from which the midline is
% generated that will be used for measurements.
% 
% Example #1
% 
% 1 1
% 2 2
% 3 3
% 4 4
% 
% We see that the first frame is measured using the midline generated BY
% the first frame. The second frame is measured using the midline generated
% BY the second frame... etc.
% 
% Example #2
% 
% 1 1
% 2 1
% 3 3
% 4 3
% 
% In this example, we measure the 1st frame using the 1st frame's
% midline, but we also measure the 2nd frame using the 1st frame's
% midline. Similarly, we measure the 3rd frame using the 3rd frame's
% midline, and measure the 4th frame using the 3rd frame's midline.
% 
% If the map string given is 'all', this function generates a matrix 
% (formatted in the way described above) for you, leaving out TL stack
% indices. This matrix is a 1-to-1 matrix (that is, each frame will be
% measured by its own midline).

    if strcmp(map_str, 'all')
        map = {};
        for i=1:size(stackNames, 2)
            name = stackNames{i};
            if ~contains(name, 'TL', 'IgnoreCase', true)
                map{end + 1} = i; %#ok<AGROW>
            end
        end
        map = repmat(cell2mat(map), [2 1]).';
        return
    end
    
    match_regex = "^(\d+:\d+\/)*\d+:\d+$";
    if isempty(regexp(map_str, match_regex, 'once'))
        error(...
            'Invalid Format. Please test your input string \"%s\" (without quotes) at https://regex101.com/r/IxKPmZ/2',...
            map_str);
    end
    
    % A bit weird to read, but essentially these lines first splits up the
    % string at "/", then subsequently at ":", and finally sticks the
    % results of those splits together in the right way
    a = cellfun(@(x) cellfun(@str2num, split(x, ':')),...
        split("1:3/2:2/3:4", "/"), 'UniformOutput', false);
    map = horzcat(a{:}).';
end