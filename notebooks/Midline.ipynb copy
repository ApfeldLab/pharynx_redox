{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "% matplotlib inline\n",
    "import numpy as np\n",
    "from skimage import feature, filters, morphology\n",
    "from skimage.external import tifffile\n",
    "from scipy.ndimage.morphology import distance_transform_edt as distance\n",
    "from scipy.ndimage.morphology import binary_fill_holes as fill_holes\n",
    "from skimage.morphology import binary_dilation as dilate\n",
    "from skimage.morphology import binary_closing as close\n",
    "from skimage.morphology import binary_erosion as erode\n",
    "from skimage.morphology import binary_opening as open\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.interpolate import UnivariateSpline as spline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "im_410 = tifffile.imread('raw_data/all_410_big.tif')\n",
    "im_470 = tifffile.imread('raw_data/all_470_big.tif')\n",
    "for i in range(len(im_410)):\n",
    "    E = filters.sobel(im_410[i])\n",
    "    T = 0.01\n",
    "    E[E<T] = 0\n",
    "    E[E>T] = 255\n",
    "    E = dilate(dilate(E))\n",
    "    E = fill_holes(E)\n",
    "    E = close(close(E))\n",
    "    E = fill_holes(E)\n",
    "    E = erode(erode(E))\n",
    "    \n",
    "    im_410[i] = E\n",
    "tifffile.imsave('raw_data/thresh_410.tif', im_410)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1136126a0>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110e015f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(im_470[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def com(img):\n",
    "    n = img.shape[0]\n",
    "    i = np.arange(n).reshape([n, 1])\n",
    "    with np.errstate(divide='ignore', invalid='ignore'):\n",
    "        return np.sum(img * i, axis=0) / np.sum(img, axis=0)\n",
    "def com_nonnan(img):\n",
    "    x = np.arange(img.shape[1])\n",
    "    y = com(distance(img))\n",
    "    s = np.dstack((x,y))\n",
    "    return s[np.invert(np.isnan(s[:,:,1]))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x10f3436d8>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f24ea58>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "I = im_410[0]\n",
    "plt.imshow(distance(I))\n",
    "s = com_nonnan(I)\n",
    "com_x = s[:,0]\n",
    "com_y = s[:,1]\n",
    "plt.plot(com_x[5:-5], com_y[5:-5], color='orange', linewidth=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def e_int(x, y, a, b):\n",
    "    \"\"\"\n",
    "    Return the internal energy of the curve approximated by the points given in x and y, \n",
    "    using the alpha and beta parameters\n",
    "\n",
    "    alpha:\n",
    "    beta:\n",
    "    \"\"\"\n",
    "    sum = 0\n",
    "    for i in range(len(x) - 1):\n",
    "        sum += a * np.abs(\n",
    "            ((x[i+1] - x[i]) ** 2) + ((y[i+1] - y[i]) ** 2)\n",
    "        )\n",
    "        sum += b * np.abs(\n",
    "            (x[i+1] - 2*x[i])\n",
    "        )\n",
    "    return sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "266.46926740058234"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e_int(com_x, com_y, 5, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from skimage.segmentation import active_contour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11905a898>]"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110967c88>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "idx = 30\n",
    "I_410 = im_410[idx]\n",
    "I_470 = im_470[idx]\n",
    "s = com_nonnan(I_410)\n",
    "snake = active_contour(distance(I_410, metric='taxicab'), s, w_edge=-1, w_line=5, bc='fixed', beta=1)\n",
    "plt.imshow(distance(I_410))\n",
    "plt.plot(s[:,0], s[:,1], '-', color='red', lw=3)\n",
    "spl = spline(s[:,0][5:], s[:,1][5:], k=4)\n",
    "spl.set_smoothing_factor(2)\n",
    "xs = np.arange(10,70)\n",
    "plt.plot(xs, spl(xs), '--')\n",
    "# plt.plot(snake[:, 0], snake[:, 1], '-r', lw=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x115befc50>"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x115b265c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(distance(im_410[30]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11989c5c0>"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1192e98d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from skimage.morphology import medial_axis as skel\n",
    "\n",
    "plt.imshow(skel(im_410[30]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11a19a7b8>"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119b943c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(im_470[90])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "def neighbours(x,y,image):\n",
    "    \"Return 8-neighbours of image point P1(x,y), in a clockwise order\"\n",
    "    img = image\n",
    "    x_1, y_1, x1, y1 = x-1, y-1, x+1, y+1\n",
    "    return [ img[x_1][y], img[x_1][y1], img[x][y1], img[x1][y1],     # P2,P3,P4,P5\n",
    "                img[x1][y], img[x1][y_1], img[x][y_1], img[x_1][y_1] ]    # P6,P7,P8,P9\n",
    "\n",
    "def transitions(neighbours):\n",
    "    \"No. of 0,1 patterns (transitions from 0 to 1) in the ordered sequence\"\n",
    "    n = neighbours + neighbours[0:1]      # P2, P3, ... , P8, P9, P2\n",
    "    return sum( (n1, n2) == (0, 1) for n1, n2 in zip(n, n[1:]) )  # (P2,P3), (P3,P4), ... , (P8,P9), (P9,P2)\n",
    "\n",
    "def zhangSuen(image):\n",
    "    \"the Zhang-Suen Thinning Algorithm\"\n",
    "    Image_Thinned = image.copy()  # deepcopy to protect the original image\n",
    "    changing1 = changing2 = 1        #  the points to be removed (set as 0)\n",
    "    while changing1 or changing2:   #  iterates until no further changes occur in the image\n",
    "        # Step 1\n",
    "        changing1 = []\n",
    "        rows, columns = Image_Thinned.shape               # x for rows, y for columns\n",
    "        for x in range(1, rows - 1):                     # No. of  rows\n",
    "            for y in range(1, columns - 1):            # No. of columns\n",
    "                P2,P3,P4,P5,P6,P7,P8,P9 = n = neighbours(x, y, Image_Thinned)\n",
    "                if (Image_Thinned[x][y] == 1     and    # Condition 0: Point P1 in the object regions \n",
    "                    2 <= sum(n) <= 6   and    # Condition 1: 2<= N(P1) <= 6\n",
    "                    transitions(n) == 1 and    # Condition 2: S(P1)=1  \n",
    "                    P2 * P4 * P6 == 0  and    # Condition 3   \n",
    "                    P4 * P6 * P8 == 0):         # Condition 4\n",
    "                    changing1.append((x,y))\n",
    "        for x, y in changing1: \n",
    "            Image_Thinned[x][y] = 0\n",
    "        # Step 2\n",
    "        changing2 = []\n",
    "        for x in range(1, rows - 1):\n",
    "            for y in range(1, columns - 1):\n",
    "                P2,P3,P4,P5,P6,P7,P8,P9 = n = neighbours(x, y, Image_Thinned)\n",
    "                if (Image_Thinned[x][y] == 1   and        # Condition 0\n",
    "                    2 <= sum(n) <= 6  and       # Condition 1\n",
    "                    transitions(n) == 1 and      # Condition 2\n",
    "                    P2 * P4 * P8 == 0 and       # Condition 3\n",
    "                    P2 * P6 * P8 == 0):            # Condition 4\n",
    "                    changing2.append((x,y))    \n",
    "        for x, y in changing2: \n",
    "            Image_Thinned[x][y] = 0\n",
    "    return Image_Thinned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11a674358>"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11a5747b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(zhangSuen(im_410[210]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11a724240>"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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g1TVQWAXcDlwSpLD0ygbgFeP8j3bq2pTVW1ay7olhZWk1WreOeskpwPvVNXBJB8Arma0uLgLuAG4D9gCPDjOoJpex+P84Exz/fc5jz0+x/v1tFgLeQfjemBHkjWMRuJfr6qHkzwP3JfkL4CngLvHmFOSVrWFvBrke8DFc+x/idH8tSRpzHwHoyQ1YFlLUgP+q3tLsBoXnlz8GVmpN0j5fOswR9aS1IBlLUkNWNaS1IBz1npfzpkujM+Txs2RtSQ1YFlLUgOWtSQ14Jz1Muv0AQXOs0p9OLKWpAYsa0lqwLKWpAYsa0lqwAXGMZvkgqMLiNLxw5G1JDVgWUtSA5a1JDXgnPUKcx5Z0mI4spakBixrSWrAspakBixrSWrAspakBixrSWrAspakBixrSWrAspakBixrSWrAspakBixrSWrAspakBixrSWrAspakBhZc1knWJHkqycPD9jlJdifZl+T+JCeOL6YkrW7HMrK+Gdg7Y/sO4M6qOhd4C9i6nMEkST+3oLJOsgH4HeArw3aAK4EHhkN2ANePI6AkaeEj6y8BnwN+Nmx/DDhYVe8O2/uBM+f6xiTbkuxJsucdDi0prCStVvOWdZJPAweq6onFnKCqtlfVpqratJZ1i/kRkrTqLeQDc68Ark1yDXAS8BHgLuCUJCcMo+sNwKvjiylJq9u8I+uquq2qNlTV2cCNwHeq6jPALuCG4bAtwINjSylJq9xSXmf9eeCPkuxjNId99/JEkiTNtpBpkCOq6rvAd4f7LwGXLH8kSdJsvoNRkhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpActakhqwrCWpgVTVyp0s+THwI+DjwL+v2ImXplNW6JW3U1bolbdTVuiVd7mz/lJVnT7fQSta1kdOmuypqk0rfuJF6JQVeuXtlBV65e2UFXrlnVRWp0EkqQHLWpIamFRZb5/QeRejU1bolbdTVuiVt1NW6JV3IlknMmctSTo2ToNIUgMrWtZJNid5Icm+JLeu5LkXIsk9SQ4keXbGvtOSPJrkxeH21ElmPCzJWUl2JXk+yXNJbh72T2vek5I8luSZIe8Xhv3nJNk9XBP3Jzlx0lkPS7ImyVNJHh62pznry0m+n+TpJHuGfdN6LZyS5IEk/5Jkb5LLpzjr+cNzevjr7SS3TCLvipV1kjXAXwKfAi4Ebkpy4Uqdf4G+Cmyete9WYGdVnQfsHLanwbvAH1fVhcBlwGeH53Na8x4Crqyqi4CNwOYklwF3AHdW1bnAW8DWCWac7WZg74ztac4K8BtVtXHGy8qm9Vq4C/i7qroAuIjRczyVWavqheE53Qj8KvDfwN8wibxVtSJfwOXAIzO2bwNuW6nzH0POs4FnZ2y/AKwf7q8HXph0xqPkfhC4ukNe4IPAk8CljN5ccMJc18iEM25g9JfwSuBhINOadcjzMvDxWfum7loAPgr8K8N62TRnnSP7bwH/NKm8KzkNcibwyozt/cO+aXdGVb023H8dOGOSYeaS5GzgYmA3U5x3mFZ4GjgAPAr8EDhYVe8Oh0zTNfEl4HPAz4btjzG9WQEK+PskTyTZNuybxmvhHODHwF8NU0xfSXIy05l1thuBe4f7K57XBcZjUKP/jU7Vy2eSfAj4BnBLVb0987Fpy1tVP63Rr5MbgEuACyYcaU5JPg0cqKonJp3lGHyyqj7BaJrxs0l+beaDU3QtnAB8AvhyVV0M/IRZUwhTlPWIYX3iWuCvZz+2UnlXsqxfBc6asb1h2Dft3kiyHmC4PTDhPEckWcuoqL9WVd8cdk9t3sOq6iCwi9FUwilJThgempZr4grg2iQvA/cxmgq5i+nMCkBVvTrcHmA0p3oJ03kt7Af2V9XuYfsBRuU9jVln+hTwZFW9MWyveN6VLOvHgfOGFfUTGf1K8dAKnn+xHgK2DPe3MJobnrgkAe4G9lbVF2c8NK15T09yynD/A4zm1/cyKu0bhsOmIm9V3VZVG6rqbEbX6Xeq6jNMYVaAJCcn+fDh+4zmVp9lCq+FqnodeCXJ+cOuq4DnmcKss9zEz6dAYBJ5V3iC/hrgB4zmKv900gsGc+S7F3gNeIfRCGAro7nKncCLwLeB0yadc8j6SUa/en0PeHr4umaK8/4K8NSQ91ngz4b9vww8Buxj9CvmuklnnZX714GHpznrkOuZ4eu5w3+3pvha2AjsGa6FvwVOndasQ96Tgf8APjpj34rn9R2MktSAC4yS1IBlLUkNWNaS1IBlLUkNWNaS1IBlLUkNWNaS1IBlLUkN/B8nrI2P8GE+AQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11a5f3208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(im_410[210])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
